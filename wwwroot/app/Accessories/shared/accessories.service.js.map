{"version":3,"sources":["Accessories/shared/accessories.service.ts"],"names":["AccessoryService","http","this","baseUrl","prototype","getAccessoryList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","uploadImage","imageData","uploaddata","headers","http_1","Headers","Content-Type","options","RequestOptions","console","log","add","get","id","Error","res","update","put","delete","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"mgCAQAA,iBAAA,WAEI,QAAAA,kBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,iBAuEtB,MAjEIH,kBAAAI,UAAAC,iBAAA,SAAiBC,MAEb,GAAIC,KAAML,KAAKC,QAAU,kBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAEpBhB,iBAAAI,UAAAa,YAAA,SAAYC,WACR,GAAIC,YAAaV,KAAKC,UAAUQ,WAC5BE,QAAU,GAAIC,QAAAC,SAAUC,eAAgB,qBACxCC,QAAU,GAAIH,QAAAI,gBAAiBL,QAASA,SAC5CM,SAAQC,IAAIT,UACZ,IAAIX,KAAML,KAAKC,QAAU,aACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKY,WAAYK,SAClCZ,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,iBAAAI,UAAAwB,IAAA,SAAItB,MACAoB,QAAQC,IAAIrB,KACZ,IAAIC,KAAML,KAAKC,QAAU,cAEzB,OADAuB,SAAQC,IAAIlB,KAAKC,UAAUJ,OACpBJ,KAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAGpBhB,iBAAAI,UAAAyB,IAAA,SAAIC,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIxB,KAAML,KAAKC,QAAU,oBAAsB2B,EAC/C,OAAO5B,MAAKD,KAAK4B,IAAItB,KAChBK,IAAI,SAAAoB,KAAO,MAAWA,KAAIlB,SAC1BC,MAAMb,KAAKc,cAEpBhB,iBAAAI,UAAA6B,OAAA,SAAO3B,MACH,GAAIC,KAAML,KAAKC,QAAU,iBACzB,OAAOD,MAAKD,KAAKiC,IAAI3B,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,iBAAAI,UAAA+B,OAAA,SAAOL,IACH,GAAIvB,KAAML,KAAKC,QAAU,mBAAqB2B,EAC9C,OAAO5B,MAAKD,KAAKkC,OAAO5B,IAAK,GAAIc,QAAAI,gBAC5BV,MAAMb,KAAKc,cAGZhB,iBAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIU,QAAAI,gBACPL,QAAS,GAAIC,QAAAC,SACTC,eAAgB,wBAQpBvB,iBAAAI,UAAAY,YAAR,SAAoBoB,OAGhB,MADAV,SAAQU,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMtB,OAAOsB,OAAS,iBAzEtDpC,iBAAAwC,YAACC,OAAAC,0FACDC,UAAA,mBAAA3C","file":"accessories.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { Accessory } from \"../../Accessories/shared/accessories.model\";\nimport { AccessorySearchModel } from \"../../Accessories/shared/accessory-search.model\";\n\n@Injectable()\nexport class AccessoryService {\n    public data: Accessory;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/accessory/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n\n\n    getAccessoryList(data: AccessorySearchModel) {\n\n        var url = this.baseUrl + \"GetAccessoryList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    uploadImage(imageData: File) {\n        let uploaddata = JSON.stringify(imageData);\n        let headers = new Headers({ 'Content-Type': 'application/json' });\n        let options = new RequestOptions({ headers: headers });\n        console.log(imageData);\n        var url = this.baseUrl + \"UploadImage\";\n        return this.http.post(url, uploaddata, options)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: Accessory) {\n        console.log(data);\n        var url = this.baseUrl + \"AddAccessory\";\n        console.log(JSON.stringify(data));\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetAccessoryById/\" + id;\n        return this.http.get(url)\n            .map(res => <Accessory>res.json())\n            .catch(this.handleError);\n    }\n    update(data: Accessory) {\n        var url = this.baseUrl + \"UpdateAccessory\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteAccessory/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}