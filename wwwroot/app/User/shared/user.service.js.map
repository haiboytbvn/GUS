{"version":3,"sources":["User/shared/user.service.ts"],"names":["ApplicationUserService","http","this","baseUrl","prototype","getApplicationUserList","url","get","map","response","json","catch","handleError","id","Error","res","add","data","console","log","post","JSON","stringify","getRequestOptions","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"ygCAOAA,uBAAA,WAEI,QAAAA,wBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,uBAgEtB,MA1DIH,wBAAAI,UAAAC,uBAAA,WACI,GAAIC,KAAMJ,KAAKC,QAAU,wBACzB,OAAOD,MAAKD,KAAKM,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMT,KAAKU,cAIpBZ,uBAAAI,UAAAG,IAAA,SAAIM,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIR,KAAMJ,KAAKC,QAAU,sBAAwBU,EACjD,OAAOX,MAAKD,KAAKM,IAAID,KAChBE,IAAI,SAAAO,KAAO,MAAiBA,KAAIL,SAChCC,MAAMT,KAAKU,cAIpBZ,uBAAAI,UAAAY,IAAA,SAAIC,MACAC,QAAQC,IAAIF,KACZ,IAAIX,KAAMJ,KAAKC,QAAU,oBACzB,OAAOD,MAAKD,KAAKmB,KAAKd,IAAKe,KAAKC,UAAUL,MAAOf,KAAKqB,qBACjDf,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMT,KAAKU,cAIpBZ,uBAAAI,UAAAoB,OAAA,SAAOP,MACH,GAAIX,KAAMJ,KAAKC,QAAU,uBACzB,OAAOD,MAAKD,KAAKwB,IAAInB,IAAKe,KAAKC,UAAUL,MAAOf,KAAKqB,qBAChDf,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMT,KAAKU,cAIpBZ,uBAAAI,UAAAsB,OAAA,SAAOb,IACH,GAAIP,KAAMJ,KAAKC,QAAU,yBAA2BU,EACpD,OAAOX,MAAKD,KAAKyB,OAAOpB,IAAK,GAAIqB,QAAAC,gBAC5BjB,MAAMT,KAAKU,cAMZZ,uBAAAI,UAAAmB,kBAAR,WACI,MAAO,IAAII,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAMpB/B,uBAAAI,UAAAQ,YAAR,SAAoBoB,OAGhB,MADAd,SAAQc,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMtB,OAAOsB,OAAS,iBAjEtDhC,uBAAAoC,YAACC,OAAAC,gGACDC,UAAA,yBAAAvC","file":"user.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { ApplicationUser } from \"../../User/shared/user.model\";\n\n@Injectable()\nexport class ApplicationUserService {\n    public data: ApplicationUser;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/applicationuser/\";  // web api URL\n\n\n\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n    getApplicationUserList() {\n        var url = this.baseUrl + \"GetApplicationUserList\";\n        return this.http.get(url)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetApplicationUser/\" + id;\n        return this.http.get(url)\n            .map(res => <ApplicationUser>res.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: ApplicationUser) {\n        console.log(data);\n        var url = this.baseUrl + \"AddApplicationUser\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [PUT] /api/items/ Web API method to update an item.\n    update(data: ApplicationUser) {\n        var url = this.baseUrl + \"UpdateApplicationUser\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteApplicationUser/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n\n\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n\n}"]}