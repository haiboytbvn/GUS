{"version":3,"sources":["VendorProductType/shared/VendorProductType.service.ts"],"names":["VendorProductTypeService","http","this","baseUrl","prototype","get","id","Error","url","map","res","json","catch","handleError","getVendorProductTypeList","response","add","data","console","log","post","JSON","stringify","getRequestOptions","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"2gCAOAA,yBAAA,WAEI,QAAAA,0BAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,yBAwDtB,MArDIH,0BAAAI,UAAAC,IAAA,SAAIC,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIC,KAAMN,KAAKC,QAAU,4BAA8BG,EACvD,OAAOJ,MAAKD,KAAKI,IAAIG,KAChBC,IAAI,SAAAC,KAAO,MAAmBA,KAAIC,SAClCC,MAAMV,KAAKW,cAIpBb,yBAAAI,UAAAU,yBAAA,WACI,GAAIN,KAAMN,KAAKC,QAAU,0BACzB,OAAOD,MAAKD,KAAKI,IAAIG,KAChBC,IAAI,SAAAM,UAAY,MAAAA,UAASJ,SACzBC,MAAMV,KAAKW,cAIpBb,yBAAAI,UAAAY,IAAA,SAAIC,MACAC,QAAQC,IAAIF,KACZ,IAAIT,KAAMN,KAAKC,QAAU,sBACzB,OAAOD,MAAKD,KAAKmB,KAAKZ,IAAKa,KAAKC,UAAUL,MAAOf,KAAKqB,qBACjDd,IAAI,SAAAM,UAAY,MAAAA,UAASJ,SACzBC,MAAMV,KAAKW,cAGpBb,yBAAAI,UAAAoB,OAAA,SAAOP,MACH,GAAIT,KAAMN,KAAKC,QAAU,yBACzB,OAAOD,MAAKD,KAAKwB,IAAIjB,IAAKa,KAAKC,UAAUL,MAAOf,KAAKqB,qBAChDd,IAAI,SAAAM,UAAY,MAAAA,UAASJ,SACzBC,MAAMV,KAAKW,cAIpBb,yBAAAI,UAAAsB,OAAA,SAAOpB,IACH,GAAIE,KAAMN,KAAKC,QAAU,2BAA6BG,EACtD,OAAOJ,MAAKD,KAAKyB,OAAOlB,IAAK,GAAImB,QAAAC,gBAC5BhB,MAAMV,KAAKW,cAGZb,yBAAAI,UAAAmB,kBAAR,WACI,MAAO,IAAII,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAMpB/B,yBAAAI,UAAAS,YAAR,SAAoBmB,OAGhB,MADAd,SAAQc,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMrB,OAAOqB,OAAS,iBA3DtDhC,yBAAAoC,YAACC,OAAAC,kGAEDC,UAAA,2BAAAvC","file":"VendorProductType.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { VendorProductType } from \"../../VendorProductType/shared/VendorProductType.model\";\n@Injectable()\n\nexport class VendorProductTypeService {\n    public data: VendorProductType;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/VendorProductType/\";  // web api URL\n\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetVendorProductTypebyId/\" + id;\n        return this.http.get(url)\n            .map(res => <VendorProductType>res.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n    getVendorProductTypeList() {\n        var url = this.baseUrl + \"GetVendorProductTypeList\";\n        return this.http.get(url)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: VendorProductType) {\n        console.log(data);\n        var url = this.baseUrl + \"AddVendorProductType\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    update(data: VendorProductType) {\n        var url = this.baseUrl + \"UpdateVendorProductType\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteVendorProductType/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}"]}