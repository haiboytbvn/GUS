{"version":3,"sources":["Brand/shared/brand.service.ts"],"names":["BrandService","http","this","baseUrl","prototype","getBrandList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","get","id","Error","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"+/BAQAA,aAAA,WAEI,QAAAA,cAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,aAuDtB,MArDIH,cAAAI,UAAAC,aAAA,SAAaC,MACT,GAAIC,KAAML,KAAKC,QAAU,cACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,aAAAI,UAAAa,IAAA,SAAIX,MACA,GAAIC,KAAML,KAAKC,QAAU,UACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAGpBhB,aAAAI,UAAAc,IAAA,SAAIC,IAEA,GAAU,MAANA,IAAoB,IAANA,GAAa,KAAM,IAAIC,OAAM,kBAC/C,IAAIb,KAAML,KAAKC,QAAU,gBAAkBgB,EAC3C,OAAOjB,MAAKD,KAAKiB,IAAIX,KAChBK,IAAI,SAAAS,KAAO,MAAOA,KAAIP,SACtBC,MAAMb,KAAKc,cAEpBhB,aAAAI,UAAAkB,OAAA,SAAOhB,MACH,GAAIC,KAAML,KAAKC,QAAU,aACzB,OAAOD,MAAKD,KAAKsB,IAAIhB,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,aAAAI,UAAAoB,OAAA,SAAOL,IACH,GAAIZ,KAAML,KAAKC,QAAU,eAAiBgB,EAC1C,OAAOjB,MAAKD,KAAKuB,OAAOjB,IAAK,GAAIkB,QAAAC,gBAC5BX,MAAMb,KAAKc,cAGZhB,aAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIc,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB7B,aAAAI,UAAAY,YAAR,SAAoBc,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMhB,OAAOgB,OAAS,iBAzDtD9B,aAAAmC,YAACC,OAAAC,sFACDC,UAAA,eAAAtC","file":"brand.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { Brand } from \"../../Brand/shared/brand.model\";\nimport { GeneralSearchModel } from \"../../Pagination/shared/generalsearch.model\";\n\n@Injectable()\nexport class BrandService {\n    public data: Brand;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/brand/\";  // web api URL\n\n    getBrandList(data: GeneralSearchModel) {\n        var url = this.baseUrl + \"GetBrandList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: Brand) {\n        var url = this.baseUrl + \"AddBrand\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    } \n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n\n        if (id == null || id == \"\" ) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetBrandbyId/\" + id;\n        return this.http.get(url)\n            .map(res => <Brand>res.json())\n            .catch(this.handleError);\n    }\n    update(data: Brand) {\n        var url = this.baseUrl + \"UpdateBrand\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteBrand/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}