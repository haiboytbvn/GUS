{"version":3,"sources":["Fabrics/shared/fabric.service.ts"],"names":["FabricsService","http","this","baseUrl","prototype","getFabricsList","data","console","log","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","get","id","Error","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"igCAOAA,eAAA,WAEI,QAAAA,gBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,cA6DtB,MAvDIH,gBAAAI,UAAAC,eAAA,SAAeC,MACXC,QAAQC,IAAIF,KACZ,IAAIG,KAAMP,KAAKC,QAAU,gBACzB,OAAOD,MAAKD,KAAKS,KAAKD,IAAKE,KAAKC,UAAUN,MAAOJ,KAAKW,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMf,KAAKgB,cAIpBlB,eAAAI,UAAAe,IAAA,SAAIb,MACAC,QAAQC,IAAIF,KACZ,IAAIG,KAAMP,KAAKC,QAAU,YAEzB,OADAI,SAAQC,IAAIG,KAAKC,UAAUN,OACpBJ,KAAKD,KAAKS,KAAKD,IAAKE,KAAKC,UAAUN,MAAOJ,KAAKW,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMf,KAAKgB,cAGpBlB,eAAAI,UAAAgB,IAAA,SAAIC,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIb,KAAMP,KAAKC,QAAU,kBAAoBkB,EAC7C,OAAOnB,MAAKD,KAAKmB,IAAIX,KAChBK,IAAI,SAAAS,KAAO,MAASA,KAAIP,SACxBC,MAAMf,KAAKgB,cAEpBlB,eAAAI,UAAAoB,OAAA,SAAOlB,MACH,GAAIG,KAAMP,KAAKC,QAAU,eACzB,OAAOD,MAAKD,KAAKwB,IAAIhB,IAAKE,KAAKC,UAAUN,MAAOJ,KAAKW,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMf,KAAKgB,cAIpBlB,eAAAI,UAAAsB,OAAA,SAAOL,IACH,GAAIZ,KAAMP,KAAKC,QAAU,iBAAmBkB,EAC5C,OAAOnB,MAAKD,KAAKyB,OAAOjB,IAAK,GAAIkB,QAAAC,gBAC5BX,MAAMf,KAAKgB,cAGZlB,eAAAI,UAAAS,kBAAR,WACI,MAAO,IAAIc,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB/B,eAAAI,UAAAc,YAAR,SAAoBc,OAGhB,MADAzB,SAAQyB,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMhB,OAAOgB,OAAS,iBA/DtDhC,eAAAoC,YAACC,OAAAC,wFACDC,UAAA,iBAAAvC","file":"fabric.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { Fabrics } from \"../../Fabrics/shared/fabric.model\";\nimport { FabricsSearchModel } from \"../../Fabrics/shared/fabrics-search.model\";\n@Injectable()\nexport class FabricsService {\n    public data: Fabrics;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/fabric/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n\n\n    getFabricsList(data: FabricsSearchModel) {\n        console.log(data);\n        var url = this.baseUrl + \"GetFabricsList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n \n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: Fabrics) {\n        console.log(data);\n        var url = this.baseUrl + \"AddFabrics\";\n        console.log(JSON.stringify(data));\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetFabricsById/\" + id;\n        return this.http.get(url)\n            .map(res => <Fabrics>res.json())\n            .catch(this.handleError);\n    }\n    update(data: Fabrics) {\n        var url = this.baseUrl + \"UpdateFabrics\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteFabrics/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}