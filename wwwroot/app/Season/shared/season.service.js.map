{"version":3,"sources":["Season/shared/season.service.ts"],"names":["SeasonService","http","this","baseUrl","prototype","getSeasonList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","console","log","get","id","Error","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"ggCAOAA,cAAA,WAEI,QAAAA,eAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,cA2DtB,MArDIH,eAAAI,UAAAC,cAAA,SAAcC,MACV,GAAIC,KAAML,KAAKC,QAAU,eACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,cAAAI,UAAAa,IAAA,SAAIX,MACAY,QAAQC,IAAIb,KACZ,IAAIC,KAAML,KAAKC,QAAU,WACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAGpBhB,cAAAI,UAAAgB,IAAA,SAAIC,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIf,KAAML,KAAKC,QAAU,iBAAmBkB,EAC5C,OAAOnB,MAAKD,KAAKmB,IAAIb,KAChBK,IAAI,SAAAW,KAAO,MAAQA,KAAIT,SACvBC,MAAMb,KAAKc,cAEpBhB,cAAAI,UAAAoB,OAAA,SAAOlB,MACH,GAAIC,KAAML,KAAKC,QAAU,cACzB,OAAOD,MAAKD,KAAKwB,IAAIlB,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,cAAAI,UAAAsB,OAAA,SAAOL,IACH,GAAId,KAAML,KAAKC,QAAU,gBAAkBkB,EAC3C,OAAOnB,MAAKD,KAAKyB,OAAOnB,IAAK,GAAIoB,QAAAC,gBAC5Bb,MAAMb,KAAKc,cAGZhB,cAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIgB,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB/B,cAAAI,UAAAY,YAAR,SAAoBgB,OAGhB,MADAd,SAAQc,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMlB,OAAOkB,OAAS,iBA7DtDhC,cAAAoC,YAACC,OAAAC,uFACDC,UAAA,gBAAAvC","file":"season.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { Season } from \"../../Season/shared/season.model\";\nimport { GeneralSearchModel } from \"../../Pagination/shared/generalsearch.model\";\n@Injectable()\nexport class SeasonService {\n    public data: Season;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/season/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n\n\n    getSeasonList(data: GeneralSearchModel){\n        var url = this.baseUrl + \"GetSeasonList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: Season) {\n        console.log(data);\n        var url = this.baseUrl + \"AddSeason\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetSeasonById/\" + id;\n        return this.http.get(url)\n            .map(res => <Season>res.json())\n            .catch(this.handleError);\n    }\n    update(data: Season) {\n        var url = this.baseUrl + \"UpdateSeason\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteSeason/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}