{"version":3,"sources":["Graphic/shared/graphic.service.ts"],"names":["GraphicService","http","this","baseUrl","prototype","getGraphicList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","uploadImage","imageData","uploaddata","headers","http_1","Headers","Content-Type","options","RequestOptions","console","log","add","get","id","Error","res","getGraphicType","update","put","delete","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"igCAQAA,eAAA,WAEI,QAAAA,gBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,eA+EtB,MAzEIH,gBAAAI,UAAAC,eAAA,SAAeC,MAEX,GAAIC,KAAML,KAAKC,QAAU,gBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAEpBhB,eAAAI,UAAAa,YAAA,SAAYC,WACR,GAAIC,YAAaV,KAAKC,UAAUQ,WAC5BE,QAAU,GAAIC,QAAAC,SAAUC,eAAgB,qBACxCC,QAAU,GAAIH,QAAAI,gBAAiBL,QAASA,SAC5CM,SAAQC,IAAIT,UACZ,IAAIX,KAAML,KAAKC,QAAU,aACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKY,WAAYK,SAClCZ,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,eAAAI,UAAAwB,IAAA,SAAItB,MACAoB,QAAQC,IAAIrB,KACZ,IAAIC,KAAML,KAAKC,QAAU,YAEzB,OADAuB,SAAQC,IAAIlB,KAAKC,UAAUJ,OACpBJ,KAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAGpBhB,eAAAI,UAAAyB,IAAA,SAAIC,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIxB,KAAML,KAAKC,QAAU,kBAAoB2B,EAC7C,OAAO5B,MAAKD,KAAK4B,IAAItB,KAChBK,IAAI,SAAAoB,KAAO,MAASA,KAAIlB,SACxBC,MAAMb,KAAKc,cAIpBhB,eAAAI,UAAA6B,eAAA,WACI,GAAI1B,KAAML,KAAKC,QAAU,gBACzB,OAAOD,MAAKD,KAAK4B,IAAItB,KAChBK,IAAI,SAAAoB,KAAO,MAAQA,KAAIlB,SACvBC,MAAMb,KAAKc,cAEpBhB,eAAAI,UAAA8B,OAAA,SAAO5B,MACH,GAAIC,KAAML,KAAKC,QAAU,eACzB,OAAOD,MAAKD,KAAKkC,IAAI5B,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,eAAAI,UAAAgC,OAAA,SAAON,IACH,GAAIvB,KAAML,KAAKC,QAAU,iBAAmB2B,EAC5C,OAAO5B,MAAKD,KAAKmC,OAAO7B,IAAK,GAAIc,QAAAI,gBAC5BV,MAAMb,KAAKc,cAGZhB,eAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIU,QAAAI,gBACPL,QAAS,GAAIC,QAAAC,SACTC,eAAgB,wBAQpBvB,eAAAI,UAAAY,YAAR,SAAoBqB,OAGhB,MADAX,SAAQW,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMvB,OAAOuB,OAAS,iBAjFtDrC,eAAAyC,YAACC,OAAAC,wFACDC,UAAA,iBAAA5C","file":"graphic.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { Graphic } from \"../../Graphic/shared/graphic.model\";\nimport { GraphicSearchModel } from \"../../Graphic/shared/graphic-search.model\";\n\n@Injectable()\nexport class GraphicService {\n    public data: Graphic;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/graphic/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n\n\n    getGraphicList(data: GraphicSearchModel){\n\n        var url = this.baseUrl + \"GetGraphicList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    uploadImage(imageData: File) {\n        let uploaddata = JSON.stringify(imageData);\n        let headers = new Headers({ 'Content-Type': 'application/json' });\n        let options = new RequestOptions({ headers: headers });\n        console.log(imageData);\n        var url = this.baseUrl + \"UploadImage\";\n        return this.http.post(url, uploaddata, options)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: Graphic) {\n        console.log(data);\n        var url = this.baseUrl + \"AddGraphic\";\n        console.log(JSON.stringify(data));\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetGraphicById/\" + id;\n        return this.http.get(url)\n            .map(res => <Graphic>res.json())\n            .catch(this.handleError);\n    }\n\n    // get Graphic type for dropdownlist\n    getGraphicType() {\n        var url = this.baseUrl + \"GetGraphicType\";\n        return this.http.get(url)\n            .map(res => <string>res.json())\n            .catch(this.handleError);\n    }\n    update(data: Graphic) {\n        var url = this.baseUrl + \"UpdateGraphic\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteGraphic/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}