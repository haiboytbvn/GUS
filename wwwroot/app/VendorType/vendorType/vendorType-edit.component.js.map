{"version":3,"sources":["VendorType/vendorType/vendorType-edit.component.ts"],"names":["VendorTypeEditComponent","fb","vendorTypeService","router","authService","activatedRoute","this","title","errorMessage","isDelete","isFormValuesChanged","prototype","ngOnInit","_this","isLoggedIn","navigate","id","snapshot","params","get","subscribe","data","ngAfterViewInit","jQuery","errorDiv","nativeElement","hide","onUpdate","update","error","displayMessage","onDelete","delete","Id","onBack","deleteConfirm","close","message","status","removeClass","innerHTML","addClass","slideDown","delay","slideUp","isFormChanged","value","oldData","isFormDataChanged","JSON","stringify","__decorate","core_1","ViewChild","Component","selector","template","providers","vendorType_service_1","VendorTypeService","forms_1","FormBuilder","exports_1"],"mappings":"gpCAsDAA,wBAAA,WAUI,QAAAA,yBACYC,GACAC,kBACAC,OACAC,YACAC,gBAJAC,KAAAL,GAAAA,GACAK,KAAAJ,kBAAAA,kBACAI,KAAAH,OAAAA,OACAG,KAAAF,YAAAA,YACAE,KAAAD,eAAAA,eAbZC,KAAAC,MAAQ,mBAERD,KAAAE,aAAe,KAEfF,KAAAG,UAAW,EACXH,KAAAI,qBAAsB,EAyG1B,MA9FIV,yBAAAW,UAAAC,SAAA,WAAA,GAAAC,OAAAP,IACSA,MAAKF,YAAYU,cAClBR,KAAKH,OAAOY,UAAU,IAG1B,IAAIC,IAAKV,KAAKD,eAAeY,SAASC,OAAW,EACtC,MAAPF,GACAV,KAAKJ,kBAAkBiB,IAAIH,IAAII,UAAU,SAACC,MACtCR,MAAKQ,KAAOA,OAIhBf,KAAKH,OAAOY,UAAU,oBAI9Bf,wBAAAW,UAAAW,gBAAA,WACIC,OAAOjB,KAAKkB,SAASC,eAAeC,QAGxC1B,wBAAAW,UAAAgB,SAAA,SAASN,MAAT,GAAAR,OAAAP,IACIA,MAAKJ,kBAAkB0B,OAAOP,MAAMD,UAAU,SAACC,MACzB,MAAdA,KAAKQ,OACLhB,MAAKQ,KAAOA,KACZR,MAAKL,aAAe,mCACpBK,MAAKiB,eAAejB,MAAKL,cAAc,KAIvCK,MAAKL,aAAea,KAAKQ,MACzBhB,MAAKiB,eAAejB,MAAKL,cAAc,KAG3C,SAACqB,OACGhB,MAAKL,aAAeqB,MACpBhB,MAAKiB,eAAejB,MAAKL,cAAc,MAKnDR,wBAAAW,UAAAoB,SAAA,SAASV,MAAT,GAAAR,OAAAP,IACIA,MAAKJ,kBAAkB8B,OAAOX,KAAKY,IAAIb,UAAU,SAACC,MAC5B,MAAdA,KAAKQ,MACLhB,MAAKV,OAAOY,UAAU,gBAItBF,MAAKL,aAAea,KAAKQ,MACzBhB,MAAKiB,eAAejB,MAAKL,cAAc,KAG3C,SAACqB,OACGhB,MAAKL,aAAeqB,MACpBhB,MAAKiB,eAAejB,MAAKL,cAAc,KAI/CF,KAAKG,UAAW,GAGpBT,wBAAAW,UAAAuB,OAAA,WACI5B,KAAKH,OAAOY,UAAU,oBAG1Bf,wBAAAW,UAAAwB,cAAA,WACI7B,KAAKG,UAAW,GAGpBT,wBAAAW,UAAAyB,MAAA,WACI9B,KAAKG,UAAW,GAGpBT,wBAAAW,UAAAmB,eAAA,SAAeO,QAAiBC,QAC5Bf,OAAOjB,KAAKkB,SAASC,eAAec,cACpCjC,KAAKkB,SAASC,cAAce,UAAYH,QAEpCC,OAAUf,OAAOjB,KAAKkB,SAASC,eAAegB,SAAS,mBACpDlB,OAAOjB,KAAKkB,SAASC,eAAegB,SAAS,iBAEpDlB,OAAOjB,KAAKkB,SAASC,eAAeiB,UAAU,KAAMC,MAAM,KAAMC,QAAQ,MAG5E5C,wBAAAW,UAAAkC,cAAA,SAAcC,OAAd,GAAAjC,OAAAP,IACIA,MAAKJ,kBAAkBiB,IAAIb,KAAKe,KAAKY,IAAIb,UAAU,SAAC2B,SAChDlC,MAAKmC,kBAAkBD,YAI/B/C,wBAAAW,UAAAqC,kBAAA,SAAkBD,SACVE,KAAKC,UAAU5C,KAAKe,QAAU4B,KAAKC,UAAUH,SAC7CzC,KAAKI,qBAAsB,EAE3BJ,KAAKI,qBAAsB,GAzGnCyC,YAACC,OAAAC,UAAU,8GAlDfrD,wBAAAmD,YAACC,OAAAE,WACGC,SAAU,kBACVC,SAAU,ikEAwCVC,WAAYC,qBAAAC,kBAAmBC,QAAAC,4MAGnCC,UAAA,0BAAA9D","file":"vendorType-edit.component.js","sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { VendorTypeService } from \"../shared/vendorType.service\";\nimport { VendorType } from \"../shared/vendorType.model\";\nimport { AuthService } from \"../../auth.service\";\n\ndeclare var jQuery: any;\n\n@Component({\n    selector: \"VendorType-edit\",\n    template: `\n<div class=\"error-message\" #errorDiv></div>\n<div>\n    <h2>\n        <a href=\"javascript:void(0)\" (click)=\"onBack()\">\n            &laquo; Back to VendorType List\n        </a>\n    </h2>\n  <div class=\"user-container\">    \n    <form class=\"form-user\" #VendorTypeForm=\"ngForm\" *ngIf=\"data\"  >\n        <h2 class=\"form-user-heading\">{{title}}</h2>\n        <div class=\"form-group\">\n            <input name=\"input-name\" type=\"text\" class=\"form-control\" placeholder=\"Enter name\" [(ngModel)]=\"data.Name\" #name=\"ngModel\" autofocus required (ngModelChange)=\"isFormChanged($event)\"  />\n            <span class=\"validator-label valid\" *ngIf=\"name.valid\">\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\n                valid!\n            </span>\n            <span class=\"validator-label invalid\" *ngIf=\"!name.valid && !name.pristine\">\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\n                invalid\n            </span>\n        </div>  \n \n        <div class=\"form-group\">\n           Is Active? <input name=\"input-isActive\" type=\"checkbox\" [(ngModel)]=\"data.IsActive\" #isActive=\"ngModel\" autofocus required (ngModelChange)=\"isFormChanged($event)\"/>           \n        </div>                  \n        <div class=\"form-group\">\n            <input type=\"button\" class=\"btn btn-primary btn-block\" [disabled]=\"!name.valid || !isFormValuesChanged\" value=\"Update\" (click)=\"onUpdate(data)\" /><br/>\n            <input type=\"button\" class=\"btn btn-danger btn-block\" [disabled]=\"!name.valid\" value=\"Delete\" (click)=\"deleteConfirm()\" />             \n       </div>             \n       <div class=\"dialog\" *ngIf=\"isDelete\">\n          <h3>Are you sure to delete ?</h3>\n            <input type=\"button\" class=\"btn btn-danger btn-block\"  value=\"Yes\" (click)=\"onDelete(data)\" />   <br/>          \n            <input type=\"button\" class=\"btn btn-primary btn-block\"  value=\"No\" (click)=\"close()\" />             \n       </div>\n       <div *ngIf=\"isDelete\" class=\"overlay\" (click)=\"Close()\"></div>\n    </form> \n  </div>       \n</div>\n`,\n    providers: [VendorTypeService, FormBuilder]\n})\n\nexport class VendorTypeEditComponent {\n    data: VendorType;\n    title = \"Edit Vendor Type\";\n    VendorTypeForm: FormGroup;\n    errorMessage = null;\n    @ViewChild('errorDiv') errorDiv: ElementRef;\n    isDelete = false;\n    isFormValuesChanged = false;\n    oldData: VendorType;\n\n    constructor(\n        private fb: FormBuilder,\n        private vendorTypeService: VendorTypeService,\n        private router: Router,\n        private authService: AuthService,\n        private activatedRoute: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        if (!this.authService.isLoggedIn()) {\n            this.router.navigate([\"\"]);\n        }\n\n        var id = this.activatedRoute.snapshot.params[\"id\"];\n        if (id !== \"\") {\n            this.vendorTypeService.get(id).subscribe((data) => {\n                this.data = data;\n            });\n        }\n        else {\n            this.router.navigate([\"VendorType/add\"]);\n        }\n    }\n\n    ngAfterViewInit() {\n        jQuery(this.errorDiv.nativeElement).hide();\n    }\n\n    onUpdate(data: VendorType) {\n        this.vendorTypeService.update(data).subscribe((data) => {\n            if (data.error == null) {\n                this.data = data;\n                this.errorMessage = 'Vendor type updated successfully';\n                this.displayMessage(this.errorMessage, true);\n            }\n            else {\n                // update failure\n                this.errorMessage = data.error;\n                this.displayMessage(this.errorMessage, false);\n            }\n        },\n            (error) => {\n                this.errorMessage = error;\n                this.displayMessage(this.errorMessage, false);\n            }\n        );\n    }\n\n    onDelete(data: VendorType) {\n        this.vendorTypeService.delete(data.Id).subscribe((data) => {\n            if (data.error == null) {\n                this.router.navigate([\"VendorType\"]);\n            }\n            else {\n                // update failure\n                this.errorMessage = data.error;\n                this.displayMessage(this.errorMessage, false);\n            }\n        },\n            (error) => {\n                this.errorMessage = error;\n                this.displayMessage(this.errorMessage, false);\n            }\n        );\n\n        this.isDelete = false;\n    }\n\n    onBack() {\n        this.router.navigate([\"vendortypelist\"]);\n    }\n\n    deleteConfirm() {\n        this.isDelete = true;\n    }\n\n    close() {\n        this.isDelete = false;\n    }\n\n    displayMessage(message: string, status: boolean) {\n        jQuery(this.errorDiv.nativeElement).removeClass();\n        this.errorDiv.nativeElement.innerHTML = message;\n\n        if (status) { jQuery(this.errorDiv.nativeElement).addClass(\"success-message\"); }\n        else { jQuery(this.errorDiv.nativeElement).addClass(\"error-message\"); }\n\n        jQuery(this.errorDiv.nativeElement).slideDown(1000).delay(6000).slideUp(1000);\n    }\n\n    isFormChanged(value) {\n        this.vendorTypeService.get(this.data.Id).subscribe((oldData) => {\n            this.isFormDataChanged(oldData);\n        });\n    }\n\n    isFormDataChanged(oldData: VendorType) {\n        if (JSON.stringify(this.data) === JSON.stringify(oldData))\n            this.isFormValuesChanged = false;\n        else\n            this.isFormValuesChanged = true;\n    }\n}"]}