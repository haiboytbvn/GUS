{"version":3,"sources":["Training/training-list/training-list.component.ts"],"names":["TrainingListComponent","trainingService","authService","router","fb","acctypeService","brandService","this","title","pagesizearr","isFormValuesChanged","prototype","ngOnInit","_this","isLoggedIn","navigate","paging","pagination_model_1","PaginationModel","searchModel","generalsearch_model_1","GeneralSearchModel","getTrainingList","subscribe","items","ACdata","error","errorMessage","getBrandList","brands","Data","trainingAddForm","group","id","name","forms_1","Validators","required","age","isactive","data","training_model_1","Training","itemid","changePage","i","Paging","PageNumber","changeSize","PageSize","onSubmit","console","log","training","add","alert","jQuery","val","prop","modal","onAdd","onUpdate","update","onEdit","get","isFormChanged","value","Id","oldData","isFormDataChanged","JSON","stringify","__decorate","core_1","Component","selector","templateUrl","providers","training_service_1","TrainingService","FormBuilder","brand_service_1","BrandService","exports_1"],"mappings":"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","file":"training-list.component.js","sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from \"@angular/core\";\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { TrainingService } from \"../shared/training.service\";\r\nimport { Training } from \"../shared/training.model\";\r\nimport { PaginationModel } from \"../../Pagination/shared/pagination.model\";\r\nimport { GeneralSearchModel } from \"../../Pagination/shared/generalsearch.model\";\r\nimport { TrainingListModel } from \"../shared/training-list.model\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"../../auth.service\";\r\nimport { SearchGeneralFilter } from \"../../SearchGeneralFilter/shared/searchGeneralFilter.model\";\r\nimport { Brand } from \"../../Brand/shared/brand.model\";\r\nimport { BrandService } from \"../../Brand/shared/brand.service\";\r\ndeclare var jQuery: any;\r\n\r\n@Component({\r\n    selector: 'training',\r\n    templateUrl: 'app/Training/training-list/training-list.component.html',\r\n    providers: [TrainingService, FormBuilder, BrandService]\r\n})\r\n\r\nexport class TrainingListComponent {\r\n    data: Training;\r\n    title = \"Training\";\r\n    selectedData: Training;\r\n    errorMessage: string;\r\n    searchModel: GeneralSearchModel;\r\n    paging: PaginationModel;\r\n    trainingAddForm: FormGroup;\r\n    accessorycategories: Training[];\r\n    ACdata: TrainingListModel;\r\n    pagesizearr: number[] = [10, 20, 30, 0];\r\n    types: Training[];\r\n    itemid: string;\r\n    isFormValuesChanged = false;\r\n    trainingEditForm: FormGroup;\r\n    brands: Brand[];\r\n    constructor(private trainingService: TrainingService,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private fb: FormBuilder,\r\n        private acctypeService: TrainingService,\r\n        private brandService: BrandService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.authService.isLoggedIn()) {\r\n            this.router.navigate([\"\"]);\r\n        }\r\n        this.paging = new PaginationModel(10, 1, \"Name\", 0, [], 0);\r\n        this.searchModel = new GeneralSearchModel(\"\", \"\", \"\", \"\", this.paging);\r\n        this.trainingService.getTrainingList(this.searchModel).subscribe(items => this.ACdata = items, error => this.errorMessage = <any>error);\r\n        this.brandService.getBrandList(this.searchModel).subscribe(items => this.brands = items.Data, error => this.errorMessage = <any>error);\r\n        this.trainingAddForm = this.fb.group(\r\n            {\r\n                id: [\"\"],\r\n                name: [\"\", [Validators.required]],\r\n                age: [\"\", [Validators.required]],\r\n                isactive: [true]\r\n            }\r\n        );\r\n        this.data = new Training(\"\", false, \"\", \"\");\r\n        this.itemid = \"\";\r\n    }\r\n    changePage(i: number) {\r\n        this.searchModel.Paging.PageNumber = i;\r\n        this.trainingService.getTrainingList(this.searchModel).subscribe(items => this.ACdata = items, error => this.errorMessage = <any>error);\r\n    }\r\n\r\n    changeSize(i: number) {\r\n        if (i == 0) {\r\n            this.searchModel.Paging.PageNumber = 0;\r\n        } else {\r\n            this.searchModel.Paging.PageSize = i;\r\n            this.searchModel.Paging.PageNumber = 1;\r\n        }\r\n\r\n        this.trainingService.getTrainingList(this.searchModel).subscribe(items => this.ACdata = items, error => this.errorMessage = <any>error);\r\n    }\r\n\r\n    onSubmit(data: any) {\r\n        console.log(data);\r\n        var training = new Training(\"\", data.isactive, data.name, data.age);\r\n        this.trainingService.add(training).subscribe((data) => {\r\n            if (data.error == null) {\r\n\r\n\r\n                this.trainingService.getTrainingList(this.searchModel).subscribe(items => this.ACdata = items, error => this.errorMessage = <any>error);\r\n                alert(\"added successfully\");\r\n                this.data = new Training(\"\", false, \"\", \"\");\r\n                jQuery('#txtName').val('');\r\n                jQuery('#ckIsActive').prop('checked', true);\r\n            } else {\r\n                // update failure\r\n                this.errorMessage = data.error;\r\n                alert(this.errorMessage);\r\n            }\r\n        },\r\n            (error) => {\r\n                this.errorMessage = error;\r\n                alert(this.errorMessage);\r\n            }\r\n        );\r\n        jQuery('#myModalAdd').modal('hide');\r\n\r\n\r\n\r\n    }\r\n    onAdd() {\r\n        jQuery('#txtName').val('');\r\n        jQuery('#ckIsActive').prop('checked', true);\r\n    }\r\n    onUpdate(data: any) {\r\n        // else, update it\r\n        // var training = new Training(data.id, null, null, data.isactive, data.name, false, data.buyercode, data.acctype);\r\n        console.log(data);\r\n        this.trainingService.update(data).subscribe((data) => {\r\n            if (data.error == null) {\r\n                this.data = data;\r\n                this.trainingService.getTrainingList(this.searchModel).subscribe(items => this.ACdata = items, error => this.errorMessage = <any>error);\r\n                alert(\"updated successfully\");\r\n                jQuery('#myModalEdit').modal('hide');\r\n                this.itemid == \"\";\r\n            }\r\n            else {\r\n                // update failure\r\n                this.errorMessage = data.error;\r\n                alert(this.errorMessage);\r\n            }\r\n        },\r\n            (error) => {\r\n                this.errorMessage = error;\r\n                alert(this.errorMessage);\r\n            }\r\n        );\r\n    }\r\n    onEdit(id: string) {\r\n        this.itemid = id;\r\n        if (id !== \"\") {\r\n            this.trainingService.get(id).subscribe((data) => {\r\n                this.data = data;\r\n            });\r\n        }\r\n    }\r\n    isFormChanged(value) {\r\n        this.trainingService.get(this.data.Id).subscribe((oldData) => {\r\n            this.isFormDataChanged(oldData);\r\n        });\r\n    }\r\n\r\n    isFormDataChanged(oldData: Training) {\r\n        if (JSON.stringify(this.data) === JSON.stringify(oldData))\r\n            this.isFormValuesChanged = false;\r\n        else\r\n            this.isFormValuesChanged = true;\r\n    }\r\n}"]}