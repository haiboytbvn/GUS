{"version":3,"sources":["UserRole/shared/userRole.service.ts"],"names":["UserRoleService","http","this","baseUrl","prototype","getUserRoleList","url","get","map","response","json","catch","handleError","id","Error","res","getUserMatrix","add","data","console","log","post","JSON","stringify","getRequestOptions","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"kgCAQAA,gBAAA,WAEI,QAAAA,iBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,gBAiEtB,MA7DIH,iBAAAI,UAAAC,gBAAA,WACI,GAAIC,KAAMJ,KAAKC,QAAU,iBACzB,OAAOD,MAAKD,KAAKM,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMT,KAAKU,cAGpBZ,gBAAAI,UAAAG,IAAA,SAAIM,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIR,KAAMJ,KAAKC,QAAU,eAAiBU,EAC1C,OAAOX,MAAKD,KAAKM,IAAID,KAChBE,IAAI,SAAAO,KAAO,MAAUA,KAAIL,SACzBC,MAAMT,KAAKU,cAGpBZ,gBAAAI,UAAAY,cAAA,SAAcH,IACV,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIR,KAAMJ,KAAKC,QAAU,sBAAwBU,EACjD,OAAOX,MAAKD,KAAKM,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMT,KAAKU,cAGpBZ,gBAAAI,UAAAa,IAAA,SAAIC,MACAC,QAAQC,IAAIF,KACZ,IAAIZ,KAAMJ,KAAKC,QAAU,aACzB,OAAOD,MAAKD,KAAKoB,KAAKf,IAAKgB,KAAKC,UAAUL,MAAOhB,KAAKsB,qBACjDhB,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMT,KAAKU,cAGpBZ,gBAAAI,UAAAqB,OAAA,SAAOP,MACH,GAAIZ,KAAMJ,KAAKC,QAAU,gBACzB,OAAOD,MAAKD,KAAKyB,IAAIpB,IAAKgB,KAAKC,UAAUL,MAAOhB,KAAKsB,qBAChDhB,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMT,KAAKU,cAGpBZ,gBAAAI,UAAAuB,OAAA,SAAOd,IACH,GAAIP,KAAMJ,KAAKC,QAAU,kBAAoBU,EAC7C,OAAOX,MAAKD,KAAK0B,OAAOrB,IAAK,GAAIsB,QAAAC,gBAC5BlB,MAAMT,KAAKU,cAKZZ,gBAAAI,UAAAoB,kBAAR,WACI,MAAO,IAAII,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAMpBhC,gBAAAI,UAAAQ,YAAR,SAAoBqB,OAGhB,MADAd,SAAQc,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMvB,OAAOuB,OAAS,iBAlEtDjC,gBAAAqC,YAACC,OAAAC,yFACDC,UAAA,kBAAAxC","file":"userRole.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { UserRole } from \"../../UserRole/shared/userRole.model\";\nimport { UserRoleMatrix } from \"../../UserRole/shared/UserRoleMatrix.model\";\n\n@Injectable()\nexport class UserRoleService {\n    public data: UserRoleMatrix;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/userRole/\";  // web api URL\n\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n    getUserRoleList() {\n        var url = this.baseUrl + \"GetUserRoleList\";\n        return this.http.get(url)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetUserRole/\" + id;\n        return this.http.get(url)\n            .map(res => <UserRole>res.json())\n            .catch(this.handleError);\n    }\n\n    getUserMatrix(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetUserMatrixValue/\" + id;\n        return this.http.get(url)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    add(data: UserRoleMatrix) {\n        console.log(data);\n        var url = this.baseUrl + \"AddUserRole\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    update(data: UserRoleMatrix) {\n        var url = this.baseUrl + \"UpdateUserRole\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteUserRole/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n\n}\n"]}