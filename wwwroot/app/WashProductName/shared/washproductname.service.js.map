{"version":3,"sources":["WashProductName/shared/washproductname.service.ts"],"names":["WashProductNameService","http","this","baseUrl","prototype","getWashProductNameList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","getWashProductNameByCategory","id","Error","get","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"ygCAQAA,uBAAA,WAEI,QAAAA,wBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,uBA+DtB,MA7DIH,wBAAAI,UAAAC,uBAAA,SAAuBC,MACnB,GAAIC,KAAML,KAAKC,QAAU,wBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,uBAAAI,UAAAa,IAAA,SAAIX,MACA,GAAIC,KAAML,KAAKC,QAAU,oBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAEpBhB,uBAAAI,UAAAc,6BAAA,SAA6BC,IACzB,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIb,KAAML,KAAKC,QAAU,gCAAkCgB,EAC3D,OAAOjB,MAAKD,KAAKoB,IAAId,KAChBK,IAAI,SAAAU,KAAO,MAAiBA,KAAIR,SAChCC,MAAMb,KAAKc,cAIpBhB,uBAAAI,UAAAiB,IAAA,SAAIF,IAEA,GAAU,MAANA,IAAoB,IAANA,GAAa,KAAM,IAAIC,OAAM,kBAC/C,IAAIb,KAAML,KAAKC,QAAU,0BAA4BgB,EACrD,OAAOjB,MAAKD,KAAKoB,IAAId,KAChBK,IAAI,SAAAU,KAAO,MAAiBA,KAAIR,SAChCC,MAAMb,KAAKc,cAEpBhB,uBAAAI,UAAAmB,OAAA,SAAOjB,MACH,GAAIC,KAAML,KAAKC,QAAU,uBACzB,OAAOD,MAAKD,KAAKuB,IAAIjB,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,uBAAAI,UAAAqB,OAAA,SAAON,IACH,GAAIZ,KAAML,KAAKC,QAAU,yBAA2BgB,EACpD,OAAOjB,MAAKD,KAAKwB,OAAOlB,IAAK,GAAImB,QAAAC,gBAC5BZ,MAAMb,KAAKc,cAGZhB,uBAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIe,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB9B,uBAAAI,UAAAY,YAAR,SAAoBe,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMjB,OAAOiB,OAAS,iBAjEtD/B,uBAAAoC,YAACC,OAAAC,gGACDC,UAAA,yBAAAvC","file":"washproductname.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { WashProductName } from \"../../WashProductName/shared/washproductname.model\";\nimport { GeneralSearchModel } from \"../../Pagination/shared/generalsearch.model\";\n\n@Injectable()\nexport class WashProductNameService {\n    public data: WashProductName;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/washproductname/\";  // web api URL\n\n    getWashProductNameList(data: GeneralSearchModel) {\n        var url = this.baseUrl + \"GetWashProductNameList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: WashProductName) {\n        var url = this.baseUrl + \"AddWashProductName\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    } \n    getWashProductNameByCategory(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetWashProductNameByCategory/\" + id;\n        return this.http.get(url)\n            .map(res => <WashProductName>res.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n\n        if (id == null || id == \"\" ) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetWashProductNamebyId/\" + id;\n        return this.http.get(url)\n            .map(res => <WashProductName>res.json())\n            .catch(this.handleError);\n    }\n    update(data: WashProductName) {\n        var url = this.baseUrl + \"UpdateWashProductName\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteWashProductName/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}