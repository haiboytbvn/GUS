{"version":3,"sources":["Spec/shared/spec.service.ts"],"names":["SpecService","http","this","baseUrl","prototype","add","data","url","console","log","JSON","stringify","post","getRequestOptions","map","response","json","catch","handleError","getSpecList","get","id","Error","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"8/BAOAA,YAAA,WAEI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,YA0DtB,MApDIH,aAAAI,UAAAC,IAAA,SAAIC,MACA,GAAIC,KAAML,KAAKC,QAAU,UAEzB,OADAK,SAAQC,IAAIC,KAAKC,UAAUL,OACpBJ,KAAKD,KAAKW,KAAKL,IAAKG,KAAKC,UAAUL,MAAOJ,KAAKW,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMf,KAAKgB,cAGpBlB,YAAAI,UAAAe,YAAA,SAAYb,MACR,GAAIC,KAAML,KAAKC,QAAU,aACzB,OAAOD,MAAKD,KAAKW,KAAKL,IAAKG,KAAKC,UAAUL,MAAOJ,KAAKW,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMf,KAAKgB,cAGpBlB,YAAAI,UAAAgB,IAAA,SAAIC,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIf,KAAML,KAAKC,QAAU,eAAiBkB,EAC1C,OAAOnB,MAAKD,KAAKmB,IAAIb,KAChBO,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SACrBC,MAAMf,KAAKgB,cAEpBlB,YAAAI,UAAAoB,OAAA,SAAOlB,MACH,GAAIC,KAAML,KAAKC,QAAU,YACzB,OAAOD,MAAKD,KAAKwB,IAAIlB,IAAKG,KAAKC,UAAUL,MAAOJ,KAAKW,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMf,KAAKgB,cAIpBlB,YAAAI,UAAAsB,OAAA,SAAOL,IACH,GAAId,KAAML,KAAKC,QAAU,cAAgBkB,EACzC,OAAOnB,MAAKD,KAAKyB,OAAOnB,IAAK,GAAIoB,QAAAC,gBAC5BX,MAAMf,KAAKgB,cAGZlB,YAAAI,UAAAS,kBAAR,WACI,MAAO,IAAIc,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB/B,YAAAI,UAAAc,YAAR,SAAoBc,OAGhB,MADAxB,SAAQwB,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMhB,OAAOgB,OAAS,iBA5DtDhC,YAAAoC,YAACC,OAAAC,qFACDC,UAAA,cAAAvC","file":"spec.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { Spec } from \"../../Spec/shared/spec.model\";\nimport { SpecSearchModel} from \"../../Spec/shared/spec-search.model\";\n@Injectable()\nexport class SpecService {\n    public data: Spec;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/spec/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: Spec) {\n        var url = this.baseUrl + \"AddSpec1\";\n        console.log(JSON.stringify(data));\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    getSpecList(data: SpecSearchModel) {\n        var url = this.baseUrl + \"GetSpecList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetSpecById/\" + id;\n        return this.http.get(url)\n            .map(res => <Spec>res.json())\n            .catch(this.handleError);\n    }\n    update(data: Spec) {\n        var url = this.baseUrl + \"UpdateSpec\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteSpec/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}