{"version":3,"sources":["GraphicCategory/shared/graphiccategory.service.ts"],"names":["GraphicCategoryService","http","this","baseUrl","prototype","getGraphicCategoryList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","console","log","getGraphicCategoryListByType","id","Error","get","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"ygCAQAA,uBAAA,WAEI,QAAAA,wBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,uBAgEtB,MA5DIH,wBAAAI,UAAAC,uBAAA,SAAuBC,MACnB,GAAIC,KAAML,KAAKC,QAAU,wBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,uBAAAI,UAAAa,IAAA,SAAIX,MACAY,QAAQC,IAAIb,KACZ,IAAIC,KAAML,KAAKC,QAAU,oBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAEpBhB,uBAAAI,UAAAgB,6BAAA,SAA6BC,IACzB,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIf,KAAML,KAAKC,QAAU,gCAAkCkB,EAC3D,OAAOnB,MAAKD,KAAKsB,IAAIhB,KAChBK,IAAI,SAAAY,KAAO,MAAiBA,KAAIV,SAChCC,MAAMb,KAAKc,cAGpBhB,uBAAAI,UAAAmB,IAAA,SAAIF,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIf,KAAML,KAAKC,QAAU,0BAA4BkB,EACrD,OAAOnB,MAAKD,KAAKsB,IAAIhB,KAChBK,IAAI,SAAAY,KAAO,MAAiBA,KAAIV,SAChCC,MAAMb,KAAKc,cAEpBhB,uBAAAI,UAAAqB,OAAA,SAAOnB,MACH,GAAIC,KAAML,KAAKC,QAAU,uBACzB,OAAOD,MAAKD,KAAKyB,IAAInB,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,uBAAAI,UAAAuB,OAAA,SAAON,IACH,GAAId,KAAML,KAAKC,QAAU,yBAA2BkB,EACpD,OAAOnB,MAAKD,KAAK0B,OAAOpB,IAAK,GAAIqB,QAAAC,gBAC5Bd,MAAMb,KAAKc,cAGZhB,uBAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIiB,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpBhC,uBAAAI,UAAAY,YAAR,SAAoBiB,OAGhB,MADAf,SAAQe,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMnB,OAAOmB,OAAS,iBAlEtDjC,uBAAAqC,YAACC,OAAAC,gGACDC,UAAA,yBAAAxC","file":"graphiccategory.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { GraphicCategory } from \"../../GraphicCategory/shared/graphiccategory.model\";\nimport { SearchGeneralFilter } from \"../../SearchGeneralFilter/shared/searchGeneralFilter.model\";\n\n@Injectable()\nexport class GraphicCategoryService {\n    public data: GraphicCategory;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/graphiccategory/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n    getGraphicCategoryList(data: SearchGeneralFilter) {\n        var url = this.baseUrl + \"GetGraphicCategoryList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n// calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: GraphicCategory) {\n        console.log(data);\n        var url = this.baseUrl + \"AddGraphicCategory\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    getGraphicCategoryListByType(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetGraphicCategoryListByType/\" + id;\n        return this.http.get(url)\n            .map(res => <GraphicCategory>res.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetGraphicCategoryById/\" + id;\n        return this.http.get(url)\n            .map(res => <GraphicCategory>res.json())\n            .catch(this.handleError);\n    }\n    update(data: GraphicCategory) {\n        var url = this.baseUrl + \"UpdateGraphicCategory\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteGraphicCategory/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}