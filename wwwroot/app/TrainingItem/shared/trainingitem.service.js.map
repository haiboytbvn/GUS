{"version":3,"sources":["TrainingItem/shared/trainingitem.service.ts"],"names":["TrainingItemService","http","this","baseUrl","prototype","getTrainingItemList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","console","log","get","id","Error","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"sgCAOAA,oBAAA,WAEI,QAAAA,qBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,oBA6DtB,MAvDIH,qBAAAI,UAAAC,oBAAA,SAAoBC,MAChB,GAAIC,KAAML,KAAKC,QAAU,qBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,oBAAAI,UAAAa,IAAA,SAAIX,MACAY,QAAQC,IAAIb,KACZ,IAAIC,KAAML,KAAKC,QAAU,iBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAGpBhB,oBAAAI,UAAAgB,IAAA,SAAIC,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIf,KAAML,KAAKC,QAAU,uBAAyBkB,EAClD,OAAOnB,MAAKD,KAAKmB,IAAIb,KAChBK,IAAI,SAAAW,KAAO,MAAcA,KAAIT,SAC7BC,MAAMb,KAAKc,cAIpBhB,oBAAAI,UAAAoB,OAAA,SAAOlB,MACH,GAAIC,KAAML,KAAKC,QAAU,oBACzB,OAAOD,MAAKD,KAAKwB,IAAIlB,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,oBAAAI,UAAAsB,OAAA,SAAOL,IACH,GAAId,KAAML,KAAKC,QAAU,sBAAwBkB,EACjD,OAAOnB,MAAKD,KAAKyB,OAAOnB,IAAK,GAAIoB,QAAAC,gBAC5Bb,MAAMb,KAAKc,cAGZhB,oBAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIgB,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB/B,oBAAAI,UAAAY,YAAR,SAAoBgB,OAGhB,MADAd,SAAQc,MAAMA,OACPC,aAAAC,WAAWC,MAAMH,MAAMlB,OAAOkB,OAAS,iBA/DtDhC,oBAAAoC,YAACC,OAAAC,6FACDC,UAAA,sBAAAvC","file":"trainingitem.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { TrainingItem } from \"../../TrainingItem/shared/trainingitem.model\";\nimport { GeneralSearchModel } from \"../../Pagination/shared/generalsearch.model\";\n@Injectable()\nexport class TrainingItemService {\n    public data: TrainingItem;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/trainingitem/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n\n\n    getTrainingItemList(data: GeneralSearchModel) {\n        var url = this.baseUrl + \"GetTrainingItemList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: TrainingItem) {\n        console.log(data);\n        var url = this.baseUrl + \"AddTrainingItem\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetTrainingItemById/\" + id;\n        return this.http.get(url)\n            .map(res => <TrainingItem>res.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to update an item\n    update(data: TrainingItem) {\n        var url = this.baseUrl + \"UpdateTrainingItem\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteTrainingItem/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}