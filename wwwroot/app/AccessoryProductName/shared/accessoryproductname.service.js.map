{"version":3,"sources":["AccessoryProductName/shared/accessoryproductname.service.ts"],"names":["AccessoryProductNameService","http","this","baseUrl","prototype","getAccessoryProductNameList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","GetAccProductNameByCategory","id","Error","get","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"8gCAQAA,4BAAA,WAEI,QAAAA,6BAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,4BA8DtB,MA5DIH,6BAAAI,UAAAC,4BAAA,SAA4BC,MACxB,GAAIC,KAAML,KAAKC,QAAU,6BACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,4BAAAI,UAAAa,IAAA,SAAIX,MACA,GAAIC,KAAML,KAAKC,QAAU,yBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAEpBhB,4BAAAI,UAAAc,4BAAA,SAA4BC,IACxB,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIb,KAAML,KAAKC,QAAU,+BAAiCgB,EAC1D,OAAOjB,MAAKD,KAAKoB,IAAId,KAChBK,IAAI,SAAAU,KAAO,MAAsBA,KAAIR,SACrCC,MAAMb,KAAKc,cAGpBhB,4BAAAI,UAAAiB,IAAA,SAAIF,IAEA,GAAU,MAANA,IAAoB,IAANA,GAAa,KAAM,IAAIC,OAAM,kBAC/C,IAAIb,KAAML,KAAKC,QAAU,+BAAiCgB,EAC1D,OAAOjB,MAAKD,KAAKoB,IAAId,KAChBK,IAAI,SAAAU,KAAO,MAAsBA,KAAIR,SACrCC,MAAMb,KAAKc,cAEpBhB,4BAAAI,UAAAmB,OAAA,SAAOjB,MACH,GAAIC,KAAML,KAAKC,QAAU,4BACzB,OAAOD,MAAKD,KAAKuB,IAAIjB,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,4BAAAI,UAAAqB,OAAA,SAAON,IACH,GAAIZ,KAAML,KAAKC,QAAU,8BAAgCgB,EACzD,OAAOjB,MAAKD,KAAKwB,OAAOlB,IAAK,GAAImB,QAAAC,gBAC5BZ,MAAMb,KAAKc,cAGZhB,4BAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIe,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB9B,4BAAAI,UAAAY,YAAR,SAAoBe,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMjB,OAAOiB,OAAS,iBAhEtD/B,4BAAAoC,YAACC,OAAAC,qGACDC,UAAA,8BAAAvC","file":"accessoryproductname.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { AccessoryProductName } from \"../../AccessoryProductName/shared/accessoryproductname.model\";\nimport { GeneralSearchModel } from \"../../Pagination/shared/generalsearch.model\";\n\n@Injectable()\nexport class AccessoryProductNameService {\n    public data: AccessoryProductName;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/accessoryproductname/\";  // web api URL\n\n    getAccessoryProductNameList(data: GeneralSearchModel) {\n        var url = this.baseUrl + \"GetAccessoryProductNameList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: AccessoryProductName) {\n        var url = this.baseUrl + \"AddAccessoryProductName\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    } \n    GetAccProductNameByCategory(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetAccProductNameByCategory/\" + id;\n        return this.http.get(url)\n            .map(res => <AccessoryProductName>res.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n\n        if (id == null || id == \"\" ) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetAccessoryProductNamebyId/\" + id;\n        return this.http.get(url)\n            .map(res => <AccessoryProductName>res.json())\n            .catch(this.handleError);\n    }\n    update(data: AccessoryProductName) {\n        var url = this.baseUrl + \"UpdateAccessoryProductName\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteAccessoryProductName/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}