{"version":3,"sources":["Application/shared/application.service.ts"],"names":["ApplicationService","http","this","baseUrl","prototype","getApplicationList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","getbyId","id","Error","get","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"qgCAQAA,mBAAA,WAEI,QAAAA,oBAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,mBAiEtB,MA5DIH,oBAAAI,UAAAC,mBAAA,SAAmBC,MACf,GAAIC,KAAML,KAAKC,QAAU,oBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAGpBhB,mBAAAI,UAAAa,IAAA,SAAIX,MACA,GAAIC,KAAML,KAAKC,QAAU,gBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAGpBhB,mBAAAI,UAAAc,QAAA,SAAQC,IACJ,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIb,KAAML,KAAKC,QAAU,sBAAwBgB,EACjD,OAAOjB,MAAKD,KAAKoB,IAAId,KAChBK,IAAI,SAAAU,KAAO,MAAaA,KAAIR,SAC5BC,MAAMb,KAAKc,cAIpBhB,mBAAAI,UAAAiB,IAAA,SAAIF,IACA,GAAU,MAANA,IAAoB,IAANA,GAAY,KAAM,IAAIC,OAAM,kBAC9C,IAAIb,KAAML,KAAKC,QAAU,sBAAwBgB,EACjD,OAAOjB,MAAKD,KAAKoB,IAAId,KAChBK,IAAI,SAAAU,KAAO,MAAaA,KAAIR,SAC5BC,MAAMb,KAAKc,cAEpBhB,mBAAAI,UAAAmB,OAAA,SAAOjB,MACH,GAAIC,KAAML,KAAKC,QAAU,mBACzB,OAAOD,MAAKD,KAAKuB,IAAIjB,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,mBAAAI,UAAAqB,OAAA,SAAON,IACH,GAAIZ,KAAML,KAAKC,QAAU,qBAAuBgB,EAChD,OAAOjB,MAAKD,KAAKwB,OAAOlB,IAAK,GAAImB,QAAAC,gBAC5BZ,MAAMb,KAAKc,cAGZhB,mBAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIe,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB9B,mBAAAI,UAAAY,YAAR,SAAoBe,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMjB,OAAOiB,OAAS,iBAnEtD/B,mBAAAoC,YAACC,OAAAC,4FACDC,UAAA,qBAAAvC","file":"application.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { Application } from \"../../Application/shared/application.model\";\nimport { SearchGeneralFilter } from \"../../SearchGeneralFilter/shared/searchGeneralFilter.model\";\n\n@Injectable()\nexport class ApplicationService {\n    public data: Application;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/application/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n\n    getApplicationList(data: SearchGeneralFilter) {\n        var url = this.baseUrl + \"GetApplicationList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: Application) {\n        var url = this.baseUrl + \"AddApplication\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    getbyId(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetApplicationbyId/\" + id;\n        return this.http.get(url)\n            .map(res => <Application>res.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [GET] /api/items/{slug} Web API method to retrieve the item with the given slug.\n    get(id: string) {\n        if (id == null || id == \"\") { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetApplicationById/\" + id;\n        return this.http.get(url)\n            .map(res => <Application>res.json())\n            .catch(this.handleError);\n    }\n    update(data: Application) {\n        var url = this.baseUrl + \"UpdateApplication\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteApplication/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}