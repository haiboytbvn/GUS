{"version":3,"sources":["FabricsFibreContent/shared/fabricsfibrecontent.service.ts"],"names":["FabricsFibreContentService","http","this","baseUrl","prototype","getFabricsFibreContentList","data","url","post","JSON","stringify","getRequestOptions","map","response","json","catch","handleError","add","get","id","Error","res","update","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"6gCAQAA,2BAAA,WAEI,QAAAA,4BAAoBC,MAAAC,KAAAD,KAAAA,KACZC,KAAAC,QAAU,2BA0DtB,MApDIH,4BAAAI,UAAAC,2BAAA,SAA2BC,MACvB,GAAIC,KAAML,KAAKC,QAAU,4BACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,2BAAAI,UAAAa,IAAA,SAAIX,MACA,GAAIC,KAAML,KAAKC,QAAU,wBACzB,OAAOD,MAAKD,KAAKO,KAAKD,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBACjDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAGpBhB,2BAAAI,UAAAc,IAAA,SAAIC,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIb,KAAML,KAAKC,QAAU,8BAAgCgB,EACzD,OAAOjB,MAAKD,KAAKiB,IAAIX,KAChBK,IAAI,SAAAS,KAAO,MAAqBA,KAAIP,SACpCC,MAAMb,KAAKc,cAEpBhB,2BAAAI,UAAAkB,OAAA,SAAOhB,MACH,GAAIC,KAAML,KAAKC,QAAU,2BACzB,OAAOD,MAAKD,KAAKsB,IAAIhB,IAAKE,KAAKC,UAAUJ,MAAOJ,KAAKS,qBAChDC,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMb,KAAKc,cAIpBhB,2BAAAI,UAAAoB,OAAA,SAAOL,IACH,GAAIZ,KAAML,KAAKC,QAAU,6BAA+BgB,EACxD,OAAOjB,MAAKD,KAAKuB,OAAOjB,IAAK,GAAIkB,QAAAC,gBAC5BX,MAAMb,KAAKc,cAGZhB,2BAAAI,UAAAO,kBAAR,WACI,MAAO,IAAIc,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAQpB7B,2BAAAI,UAAAY,YAAR,SAAoBc,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMhB,OAAOgB,OAAS,iBA5DtD9B,2BAAAmC,YAACC,OAAAC,oGACDC,UAAA,6BAAAtC","file":"fabricsfibrecontent.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers, RequestOptions } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AuthHttp } from \"../../auth.http\";\nimport { FabricsFibreContent } from \"../../FabricsFibreContent/shared/fabricsfibrecontent.model\";\nimport { GeneralSearchModel } from \"../../Pagination/shared/generalsearch.model\";\n\n@Injectable()\nexport class FabricsFibreContentService {\n    public data: FabricsFibreContent;\n    constructor(private http: AuthHttp) { }\n    private baseUrl = \"api/fabricsfibrecontent/\";  // web api URL\n\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.  \n\n\n\n    getFabricsFibreContentList(data: GeneralSearchModel){\n        var url = this.baseUrl + \"GetFabricsFibreContentList\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(data: FabricsFibreContent) {\n        var url = this.baseUrl + \"AddFabricsFibreContent\";\n        return this.http.post(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: string) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + \"GetFabricsFibreContentById/\" + id;\n        return this.http.get(url)\n            .map(res => <FabricsFibreContent>res.json())\n            .catch(this.handleError);\n    }\n    update(data: FabricsFibreContent) {\n        var url = this.baseUrl + \"UpdateFabricsFibreContent\";\n        return this.http.put(url, JSON.stringify(data), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: string) {\n        var url = this.baseUrl + \"DeleteFabricsFibreContent/\" + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n\n\n    // returns a viable RequestOptions object to handle Json requests\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}